name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  format:
    runs-on: ubuntu-latest
    name: Format Code with Prettier
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Run Prettier
        run: npx prettier . --write

  test:
    runs-on: ubuntu-latest
    needs: format
    name: Run JavaScript Tests
    steps:
      - name: Checkout repository
        uses: actions/checkout/@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  terraform:
    runs-on: ubuntu-latest
    needs: test
    name: Terraform Plan and Apply
    environment: production
    env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.3'

      - name: Write tfvars file
        run: echo "${{ secrets.TFVARS }}" > terraform.tfvars
        working-directory: ./terraform

      - name: Terraform init
        run: terraform init
        working-directory: ./terraform


      - name: Terraform plan
        run: terraform plan -var-file=terraform.tfvars -out=tfplan
        working-directory: ./terraform


      - name: Show tfplan for debugging
        run: terraform show tfplan

      # - name: Terraform apply
      #   run: terraform apply --auto-approve -var-file=terraform.tfvars tfplan
      #   working-directory: ./terraform

        
          
